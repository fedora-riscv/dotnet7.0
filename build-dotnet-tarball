#!/bin/bash

# Usage:
#   build-dotnet-tarball [--bootstrap] <tag-from-installer>
#
# Creates a source archive from a tag (or commit) at github.com/dotnet/installer
#
# Clone dotnet/installer, check out the tag (if any), and build the
# source-tarball.

set -euo pipefail
IFS=$'\n\t'

function print_usage {
    echo "Usage:"
    echo "$0 [--bootstrap] <tag-from-installer>"
    echo
    echo "Creates a source archive from a tag at https://github.com/dotnet/installer"
    echo ""
    echo "  --bootstrap     build a source tarball usable for bootstrapping .NET"
}

function clean_dotnet_cache {
    rm -rf ~/.aspnet ~/.dotnet/ ~/.nuget/ ~/.local/share/NuGet ~/.templateengine
    rm -rf /tmp/NuGet /tmp/NuGetScratch /tmp/.NETCore* /tmp/.NETStandard* /tmp/.dotnet /tmp/dotnet.* /tmp/clr-debug-pipe* /tmp/Razor-Server /tmp/CoreFxPipe* /tmp/VBCSCompiler /tmp/.NETFramework*
}

function check_bootstrap_environment {
    if rpm -qa | grep dotnet ; then
        echo "error: dotnet is installed. Not a good idea for bootstrapping."
        exit 1
    fi
    if [ -d /usr/lib/dotnet ] || [ -d /usr/lib64/dotnet ] || [ -d /usr/share/dotnet ] ; then
        echo "error: one of /usr/lib/dotnet /usr/lib64/dotnet or /usr/share/dotnet/ exists. Not a good idea for bootstrapping."
        exit 1
    fi
    if command -v dotnet ; then
        echo "error: dotnet is in $PATH. Not a good idea for bootstrapping."
        exit 1
    fi
}

function runtime_id {

    source /etc/os-release
    case "${ID}" in
        # Remove the RHEL minor version
        rhel) rid_version=${VERSION_ID%.*} ;;

        *) rid_version=${VERSION_ID} ;;
    esac

    echo "${ID}.${rid_version}-${arch}"
}

build_bootstrap=false

declare -A archmap
archmap=(
    ["aarch64"]="arm64"
    ["amd64"]="x64"
    ["armv8l"]="arm"
    ["i386"]="x86"
    ["i686"]="x86"
    ["ppc64le"]="ppc64le"
    ["s390x"]="s390x"
    ["x86_64"]="x64"
)

arch=${archmap["$(uname -m)"]}


positional_args=()
while [[ "$#" -gt 0 ]]; do
    arg="${1}"
    case "${arg}" in
        --bootstrap)
            check_bootstrap_environment
            build_bootstrap=true
            shift
            ;;
        -h|--help)
            print_usage
            exit 0
            ;;
        *)
            positional_args+=("$1")
            shift
            ;;
    esac
done


tag=${positional_args[0]:-}
if [[ -z ${tag} ]]; then
    echo "error: missing tag to build"
    exit 1
fi

set -x

dir_name="dotnet-${tag}"
unmodified_tarball_name="${dir_name}-original"
tarball_name="${dir_name}"
tarball_suffix=.tar.gz

if [[ ${build_bootstrap} == true ]]; then
    unmodified_tarball_name="${unmodified_tarball_name}-${arch}-bootstrap"
    tarball_name="${tarball_name}-${arch}-bootstrap"
    tarball_suffix=.tar.xz
fi

if [ -f "${tarball_name}${tarball_suffix}" ]; then
    echo "error: ${tarball_name}${tarball_suffix} already exists"
    exit 1
fi

if [ ! -f "${unmodified_tarball_name}.tar.gz" ]; then
    temp_dir=$(mktemp -d -p "$(pwd)")
    pushd "${temp_dir}"
    mkdir installer
    pushd installer
    git init
    git remote add origin https://github.com/dotnet/installer
    git fetch --depth 1 origin "${tag}"
    git checkout FETCH_HEAD
    git submodule update --init --recursive
    clean_dotnet_cache
    mkdir -p "../${unmodified_tarball_name}"
    ./build.sh /p:ArcadeBuildTarball=true
    popd

    popd

    cp -a \
        "${temp_dir}"/installer/artifacts/packages/Debug/Shipping/dotnet-sdk-source-7*.tar.gz \
        "${unmodified_tarball_name}.tar.gz"

    rm -rf "${temp_dir}"
fi

rm -rf "${tarball_name}"

tar xf "${unmodified_tarball_name}.tar.gz"
mv "${unmodified_tarball_name}" "${tarball_name}"

pushd "${tarball_name}"

if [[ ${build_bootstrap} == true ]]; then
    ./prep.sh --bootstrap
else
    find . -type f -iname '*.tar.gz' -delete
    rm -rf .dotnet
fi

# Remove files with funny licenses and crypto implementations and
# other not-very-useful artifacts. We MUST NOT ship any files that
# have unapproved licenses and unexpected cryptographic
# implementations.
#
# We use rm -r (no -f) to make sure the operation fails if the files
# are not at the expected locations. If the files are not at the
# expected location, we need to find the new location of the files and
# delete them, or verify that upstream has already removed the files.

# Binaries for gradle
rm -r src/aspnetcore/src/SignalR/clients/java/signalr/gradle*

# https://github.com/dotnet/aspnetcore/issues/34785
find src/aspnetcore/src -type d -name samples -print0 | xargs -0 rm -r

# Unnecessary crypto implementation: IDEA
rm -r src/runtime/src/tests/JIT/Performance/CodeQuality/Bytemark/

# https://github.com/NuGet/Home/issues/11094
rm -r src/nuget-client/test/EndToEnd

# https://github.com/microsoft/ApplicationInsights-dotnet/issues/2670
rm -r src/source-build-externals/src/application-insights/LOGGING/test/Shared/CustomTelemetryChannel.cs

popd

if [[ ${build_bootstrap} == true ]]; then
    tar -I 'xz -9 -T 0' -cf "${tarball_name}${tarball_suffix}" "${tarball_name}"
else
    tar -czf "${tarball_name}${tarball_suffix}" "${tarball_name}"
fi
